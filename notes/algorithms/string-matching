# String Matching using Hash Functions

## Rabin-Karp Algorithm

- Does a given pattern P of size m occur in a string S of size n?

- For each s = 1,...n - m + 1, check if substring S[s],...S[s+m-1] equals P
- Time complexity: theta(m * (n - m + 1))

## Basic Idea using Hashing

- Hash the pattern P using hash function h(P)
- As you scan the entire string, compute the hash of the current substring and compare it to your pattern hash; if it is the same, make the comparison, if not, keep going (because if the hashes don't match, it's a guarantee that the substring doesn't match)
- This adds in a filtering step so that you don't compute physical comparisons on the substring if they definitely do not match

## Rolling Hash Functions

- Precompute p^(m-1) mod M where p is some prime number
- Have a sliding window of length m that updates one term in your hash function at a time so it doesn't have to be computed every time
- Time complexity of O(1) constant when using a rolling hash function because you are not recalculating, just updating (subtracting previous term and adding new term that just appeared in the window)

- In the worst case (collisions always occur), complexity is still O(m*(n-m+1))
- Assuming low probability of hash collision, running time is assumed to be on average O(m + n)

## Problem #2

Check if two strings have a common substring of size m

- Loop through S1 and search for pattern in S2. If found, return true.

Rather than comparing each substring, go through the first string, and for each substring of size m, hash the substring and store it in a perfect hash table (ensuring no collisions) along with the position in the string.

Go through the second substring, compute the rolling hash for the substring of size m, and check if it is already in the hashtable, then make the comparison at the location indicated in the hashtable.

With no collisions, time complexity is O(n1 + n2 + m) (very fast), but is still bad in the worst case