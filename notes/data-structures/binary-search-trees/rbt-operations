# Operations on Red-Black Trees

Same operations as binary search trees

- Find(key)
    - Exactly the same as in binary search trees
    - Time complexity guaranteed to be O(log(n))
- Insert(key)
    - Follows the same algorithm as regular BSTs, but need to determine color
- Delete(key)
    - Follows the same algorithm as BSTs, but you will need to restore the properties of the tree (see below)

Insert and delete also have time complexity O(log(n)), we just need to worry about repairing the tree after these operations

## Restoring Red-Black Property after Insertion/Deletion

Inserted node is always colored red

3 cases:

1. If the parent of the inserted node x is colored black, RB property remains, we are good
2. If the parent of x is red, a red-red violation occurs; how do we fix it?
    - If the parent node's sibling (uncle) is also red, recursively recolor the tree until the red-red violation is "pushed up" to the top of the tree, until you finally color the root black
3. If the parent of x is red and the uncle is black, we perform tree rotation (see below) and then update colors accordingly

### Rotations

Two types of tree rotations:

1. Right/clockwise rotation
2. Left/counter-clockwise rotation

These are implemented through pointer swaps
    