# Heaps

## A heap is a specialized tree-based data structure that satisfies the heap property. There are two main types of heaps:

- Max-Heap: In a max-heap, for any given node i, the value of i is greater than or equal to the values of its children. This means the maximum value is at the root of the heap.
- Min-Heap: In a min-heap, for any given node i, the value of i is less than or equal to the values of its children. This means the minimum value is at the root of the heap.

Heaps are typically implemented as binary heaps, where each node has at most two children.

- A heap is a complete binary tree, meaning all levels of the tree are fully filled except possibly for the last level, which is filled from left to right.

## Heap operations

- Insertion: 
    - Add the element at the end of the tree (maintain the complete binary tree property).
    - Restore the heap property by "bubbling up" the element (swap it with its parent until the heap property is restored).

- Deletion (Extracting Max/Min):
    - To remove the root of the heap (the maximum in a max-heap or minimum in a min-heap):
    - Replace the root with the last element in the tree.
    - Remove the last element (as it has been moved to the root).
    - Restore the heap property by "bubbling down" the root element (swap it with its largest child in a max-heap or smallest child in a min-heap until the heap property is restored).

- Heapify: Convert an unsorted array into a heap. This can be done in O(n) time complexity using a bottom-up approach, ensuring the heap property is maintained throughout.

Python's heapq module provides functions to work with heaps and implements a min-heap by default.